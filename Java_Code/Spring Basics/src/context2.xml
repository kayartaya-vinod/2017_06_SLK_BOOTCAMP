<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

	<bean name="dao" class="slk.dao.ContactsDaoSpringImpl" autowire="byName">
		<!-- this property refers to the name/id of another bean -->
		<!-- this is a.k.a wiring, and since we are manually doing it, it is known 
			as manual wiring. Spring can also do a auto-wiring -->
		<!-- <property name="dataSource" ref="dbcp" /> -->
	</bean>

	<bean name="dbcp,dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- all these properties correspond to setters in BasicDataSource class -->
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="url" value="jdbc:hsqldb:hsql://localhost/training" />
		<property name="initialSize" value="10" />
		<property name="maxIdle" value="20" />
		<property name="maxActive" value="50" />
		<property name="maxWait" value="500" />
		<property name="minIdle" value="5" />
	</bean>
	<bean class="slk.dao.ContactsDaoSpringImpl">
		<!-- constructor injection -->
		<constructor-arg value="org.hsqldb.jdbcDriver" />
		<constructor-arg name="username" value="sa" />
		<constructor-arg index="3" value="" />
		<constructor-arg value="jdbc:hsqldb:hsql://localhost/training" />
	</bean>

	<bean class="slk.dao.ContactsDaoSpringImpl" scope="prototype">
		<!-- for each of the property name used, spring calls the corresponding 
			setter -->
		<!-- property/setter injection -->
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="username" value="sa" />
		<property name="password" value="" />
		<property name="url" value="jdbc:hsqldb:hsql://localhost/training" />
	</bean>


</beans>




